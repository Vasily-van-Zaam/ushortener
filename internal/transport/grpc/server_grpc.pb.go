//protoc --go_out=. --go_opt=paths=source_relative  --go-grpc_out=./  --go-grpc_opt=paths=source_relative ./internal/transport/grpc/server.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: internal/transport/grpc/server.proto

package gshort

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Grpc_GetBaseURL_FullMethodName     = "/grpc.gshort.Grpc/GetBaseURL"
	Grpc_Ping_FullMethodName           = "/grpc.gshort.Grpc/Ping"
	Grpc_SetURL_FullMethodName         = "/grpc.gshort.Grpc/SetURL"
	Grpc_SetUrls_FullMethodName        = "/grpc.gshort.Grpc/SetUrls"
	Grpc_GetUserURLS_FullMethodName    = "/grpc.gshort.Grpc/GetUserURLS"
	Grpc_DeleteUserURLS_FullMethodName = "/grpc.gshort.Grpc/DeleteUserURLS"
	Grpc_GetStats_FullMethodName       = "/grpc.gshort.Grpc/GetStats"
)

// GrpcClient is the client API for Grpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcClient interface {
	GetBaseURL(ctx context.Context, in *ShortUrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
	Ping(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	SetURL(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error)
	SetUrls(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchRequest, error)
	GetUserURLS(ctx context.Context, in *GetUserURLSRequest, opts ...grpc.CallOption) (*UserUrlsResponse, error)
	DeleteUserURLS(ctx context.Context, in *DeleteUserURLSRequest, opts ...grpc.CallOption) (*DeleteUserURLSResponse, error)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type grpcClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcClient(cc grpc.ClientConnInterface) GrpcClient {
	return &grpcClient{cc}
}

func (c *grpcClient) GetBaseURL(ctx context.Context, in *ShortUrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, Grpc_GetBaseURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) Ping(ctx context.Context, in *GetPingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, Grpc_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) SetURL(ctx context.Context, in *UrlRequest, opts ...grpc.CallOption) (*UrlResponse, error) {
	out := new(UrlResponse)
	err := c.cc.Invoke(ctx, Grpc_SetURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) SetUrls(ctx context.Context, in *ShortenBatchRequest, opts ...grpc.CallOption) (*ShortenBatchRequest, error) {
	out := new(ShortenBatchRequest)
	err := c.cc.Invoke(ctx, Grpc_SetUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetUserURLS(ctx context.Context, in *GetUserURLSRequest, opts ...grpc.CallOption) (*UserUrlsResponse, error) {
	out := new(UserUrlsResponse)
	err := c.cc.Invoke(ctx, Grpc_GetUserURLS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) DeleteUserURLS(ctx context.Context, in *DeleteUserURLSRequest, opts ...grpc.CallOption) (*DeleteUserURLSResponse, error) {
	out := new(DeleteUserURLSResponse)
	err := c.cc.Invoke(ctx, Grpc_DeleteUserURLS_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grpcClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, Grpc_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcServer is the server API for Grpc service.
// All implementations must embed UnimplementedGrpcServer
// for forward compatibility
type GrpcServer interface {
	GetBaseURL(context.Context, *ShortUrlRequest) (*UrlResponse, error)
	Ping(context.Context, *GetPingRequest) (*PingResponse, error)
	SetURL(context.Context, *UrlRequest) (*UrlResponse, error)
	SetUrls(context.Context, *ShortenBatchRequest) (*ShortenBatchRequest, error)
	GetUserURLS(context.Context, *GetUserURLSRequest) (*UserUrlsResponse, error)
	DeleteUserURLS(context.Context, *DeleteUserURLSRequest) (*DeleteUserURLSResponse, error)
	GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedGrpcServer()
}

// UnimplementedGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServer struct {
}

func (UnimplementedGrpcServer) GetBaseURL(context.Context, *ShortUrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBaseURL not implemented")
}
func (UnimplementedGrpcServer) Ping(context.Context, *GetPingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGrpcServer) SetURL(context.Context, *UrlRequest) (*UrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetURL not implemented")
}
func (UnimplementedGrpcServer) SetUrls(context.Context, *ShortenBatchRequest) (*ShortenBatchRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUrls not implemented")
}
func (UnimplementedGrpcServer) GetUserURLS(context.Context, *GetUserURLSRequest) (*UserUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLS not implemented")
}
func (UnimplementedGrpcServer) DeleteUserURLS(context.Context, *DeleteUserURLSRequest) (*DeleteUserURLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLS not implemented")
}
func (UnimplementedGrpcServer) GetStats(context.Context, *GetStatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedGrpcServer) mustEmbedUnimplementedGrpcServer() {}

// UnsafeGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServer will
// result in compilation errors.
type UnsafeGrpcServer interface {
	mustEmbedUnimplementedGrpcServer()
}

func RegisterGrpcServer(s grpc.ServiceRegistrar, srv GrpcServer) {
	s.RegisterService(&Grpc_ServiceDesc, srv)
}

func _Grpc_GetBaseURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetBaseURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetBaseURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetBaseURL(ctx, req.(*ShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).Ping(ctx, req.(*GetPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_SetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).SetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_SetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).SetURL(ctx, req.(*UrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_SetUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).SetUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_SetUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).SetUrls(ctx, req.(*ShortenBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetUserURLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetUserURLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetUserURLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetUserURLS(ctx, req.(*GetUserURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_DeleteUserURLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).DeleteUserURLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_DeleteUserURLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).DeleteUserURLS(ctx, req.(*DeleteUserURLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grpc_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Grpc_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grpc_ServiceDesc is the grpc.ServiceDesc for Grpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gshort.Grpc",
	HandlerType: (*GrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBaseURL",
			Handler:    _Grpc_GetBaseURL_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Grpc_Ping_Handler,
		},
		{
			MethodName: "SetURL",
			Handler:    _Grpc_SetURL_Handler,
		},
		{
			MethodName: "SetUrls",
			Handler:    _Grpc_SetUrls_Handler,
		},
		{
			MethodName: "GetUserURLS",
			Handler:    _Grpc_GetUserURLS_Handler,
		},
		{
			MethodName: "DeleteUserURLS",
			Handler:    _Grpc_DeleteUserURLS_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Grpc_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/transport/grpc/server.proto",
}
